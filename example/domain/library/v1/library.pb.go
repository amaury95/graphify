// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: library/v1/library.proto

package libraryv1

import (
	bytes "bytes"
	utils "github.com/amaury95/protoc-gen-go-tag/utils"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Category int32

const (
	Category_CATEGORY_UNSPECIFIED Category = 0
	Category_CATEGORY_DRAMA       Category = 1
	Category_CATEGORY_HORROR      Category = 2
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0: "CATEGORY_UNSPECIFIED",
		1: "CATEGORY_DRAMA",
		2: "CATEGORY_HORROR",
	}
	Category_value = map[string]int32{
		"CATEGORY_UNSPECIFIED": 0,
		"CATEGORY_DRAMA":       1,
		"CATEGORY_HORROR":      2,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_library_v1_library_proto_enumTypes[0].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_library_v1_library_proto_enumTypes[0]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_library_v1_library_proto_rawDescGZIP(), []int{0}
}

type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_library_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_library_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_library_v1_library_proto_rawDescGZIP(), []int{0}
}

func (x *Character) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Character) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type Book struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=_key,proto3" json:"_key,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// Types that are assignable to Type:
	//
	//	*Book_Novel_
	//	*Book_ShortStory_
	//	*Book_Academic_
	//	*Book_Poetry_
	//	*Book_Biography_
	Type       isBook_Type           `protobuf_oneof:"type"`
	MainReview *Book_Review          `protobuf:"bytes,9,opt,name=mainReview,proto3" json:"mainReview,omitempty"`
	Reviews    []*Book_Review        `protobuf:"bytes,10,rep,name=reviews,proto3" json:"reviews,omitempty"`
	Tags       []string              `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
	BookPrice  map[string]int32      `protobuf:"bytes,12,rep,name=bookPrice,proto3" json:"bookPrice,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Chapters   map[int32]string      `protobuf:"bytes,13,rep,name=chapters,proto3" json:"chapters,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Characters map[string]*Character `protobuf:"bytes,14,rep,name=characters,proto3" json:"characters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Portrait   []byte                `protobuf:"bytes,15,opt,name=portrait,proto3" json:"portrait,omitempty"`
	Gallery    [][]byte              `protobuf:"bytes,16,rep,name=gallery,proto3" json:"gallery,omitempty"`
	Category   Category              `protobuf:"varint,17,opt,name=category,proto3,enum=library.v1.Category" json:"category,omitempty"`
}

func (x *Book) Reset() {
	*x = Book{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_library_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book) ProtoMessage() {}

func (x *Book) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_library_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book.ProtoReflect.Descriptor instead.
func (*Book) Descriptor() ([]byte, []int) {
	return file_library_v1_library_proto_rawDescGZIP(), []int{1}
}

func (x *Book) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Book) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Book) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (m *Book) GetType() isBook_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Book) GetNovel() *Book_Novel {
	if x, ok := x.GetType().(*Book_Novel_); ok {
		return x.Novel
	}
	return nil
}

func (x *Book) GetShortStory() *Book_ShortStory {
	if x, ok := x.GetType().(*Book_ShortStory_); ok {
		return x.ShortStory
	}
	return nil
}

func (x *Book) GetAcademic() *Book_Academic {
	if x, ok := x.GetType().(*Book_Academic_); ok {
		return x.Academic
	}
	return nil
}

func (x *Book) GetPoetry() *Book_Poetry {
	if x, ok := x.GetType().(*Book_Poetry_); ok {
		return x.Poetry
	}
	return nil
}

func (x *Book) GetBiography() *Book_Biography {
	if x, ok := x.GetType().(*Book_Biography_); ok {
		return x.Biography
	}
	return nil
}

func (x *Book) GetMainReview() *Book_Review {
	if x != nil {
		return x.MainReview
	}
	return nil
}

func (x *Book) GetReviews() []*Book_Review {
	if x != nil {
		return x.Reviews
	}
	return nil
}

func (x *Book) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Book) GetBookPrice() map[string]int32 {
	if x != nil {
		return x.BookPrice
	}
	return nil
}

func (x *Book) GetChapters() map[int32]string {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *Book) GetCharacters() map[string]*Character {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *Book) GetPortrait() []byte {
	if x != nil {
		return x.Portrait
	}
	return nil
}

func (x *Book) GetGallery() [][]byte {
	if x != nil {
		return x.Gallery
	}
	return nil
}

func (x *Book) GetCategory() Category {
	if x != nil {
		return x.Category
	}
	return Category_CATEGORY_UNSPECIFIED
}

type isBook_Type interface {
	isBook_Type()
}

type Book_Novel_ struct {
	Novel *Book_Novel `protobuf:"bytes,4,opt,name=novel,proto3,oneof"`
}

type Book_ShortStory_ struct {
	ShortStory *Book_ShortStory `protobuf:"bytes,5,opt,name=shortStory,proto3,oneof"`
}

type Book_Academic_ struct {
	Academic *Book_Academic `protobuf:"bytes,6,opt,name=academic,proto3,oneof"`
}

type Book_Poetry_ struct {
	Poetry *Book_Poetry `protobuf:"bytes,7,opt,name=poetry,proto3,oneof"`
}

type Book_Biography_ struct {
	Biography *Book_Biography `protobuf:"bytes,8,opt,name=biography,proto3,oneof"`
}

func (*Book_Novel_) isBook_Type() {}

func (*Book_ShortStory_) isBook_Type() {}

func (*Book_Academic_) isBook_Type() {}

func (*Book_Poetry_) isBook_Type() {}

func (*Book_Biography_) isBook_Type() {}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=_key,proto3" json:"_key,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email  string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Member bool   `protobuf:"varint,4,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_library_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_library_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_library_v1_library_proto_rawDescGZIP(), []int{2}
}

func (x *Client) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Client) GetMember() bool {
	if x != nil {
		return x.Member
	}
	return false
}

type Borrow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=_key,proto3" json:"_key,omitempty"`
	From string `protobuf:"bytes,2,opt,name=_from,proto3" json:"_from,omitempty"`
	To   string `protobuf:"bytes,3,opt,name=_to,proto3" json:"_to,omitempty"`
	Date *int64 `protobuf:"varint,4,opt,name=date,proto3,oneof" json:"date,omitempty"`
}

func (x *Borrow) Reset() {
	*x = Borrow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_library_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Borrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Borrow) ProtoMessage() {}

func (x *Borrow) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_library_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Borrow.ProtoReflect.Descriptor instead.
func (*Borrow) Descriptor() ([]byte, []int) {
	return file_library_v1_library_proto_rawDescGZIP(), []int{3}
}

func (x *Borrow) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Borrow) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Borrow) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Borrow) GetDate() int64 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

type Book_Novel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genre           string `protobuf:"bytes,1,opt,name=genre,proto3" json:"genre,omitempty"`
	PublicationYear int32  `protobuf:"varint,2,opt,name=publicationYear,proto3" json:"publicationYear,omitempty"`
}

func (x *Book_Novel) Reset() {
	*x = Book_Novel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_library_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_Novel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_Novel) ProtoMessage() {}

func (x *Book_Novel) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_library_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_Novel.ProtoReflect.Descriptor instead.
func (*Book_Novel) Descriptor() ([]byte, []int) {
	return file_library_v1_library_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Book_Novel) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *Book_Novel) GetPublicationYear() int32 {
	if x != nil {
		return x.PublicationYear
	}
	return 0
}

type Book_ShortStory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LengthPages  int32 `protobuf:"varint,1,opt,name=lengthPages,proto3" json:"lengthPages,omitempty"`
	IsCollection bool  `protobuf:"varint,2,opt,name=isCollection,proto3" json:"isCollection,omitempty"`
}

func (x *Book_ShortStory) Reset() {
	*x = Book_ShortStory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_library_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_ShortStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_ShortStory) ProtoMessage() {}

func (x *Book_ShortStory) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_library_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_ShortStory.ProtoReflect.Descriptor instead.
func (*Book_ShortStory) Descriptor() ([]byte, []int) {
	return file_library_v1_library_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Book_ShortStory) GetLengthPages() int32 {
	if x != nil {
		return x.LengthPages
	}
	return 0
}

func (x *Book_ShortStory) GetIsCollection() bool {
	if x != nil {
		return x.IsCollection
	}
	return false
}

type Book_Academic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Edition int32  `protobuf:"varint,2,opt,name=edition,proto3" json:"edition,omitempty"`
}

func (x *Book_Academic) Reset() {
	*x = Book_Academic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_library_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_Academic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_Academic) ProtoMessage() {}

func (x *Book_Academic) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_library_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_Academic.ProtoReflect.Descriptor instead.
func (*Book_Academic) Descriptor() ([]byte, []int) {
	return file_library_v1_library_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Book_Academic) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Book_Academic) GetEdition() int32 {
	if x != nil {
		return x.Edition
	}
	return 0
}

type Book_Poetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style       string `protobuf:"bytes,1,opt,name=style,proto3" json:"style,omitempty"`
	IsAnthology bool   `protobuf:"varint,2,opt,name=isAnthology,proto3" json:"isAnthology,omitempty"`
}

func (x *Book_Poetry) Reset() {
	*x = Book_Poetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_library_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_Poetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_Poetry) ProtoMessage() {}

func (x *Book_Poetry) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_library_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_Poetry.ProtoReflect.Descriptor instead.
func (*Book_Poetry) Descriptor() ([]byte, []int) {
	return file_library_v1_library_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Book_Poetry) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *Book_Poetry) GetIsAnthology() bool {
	if x != nil {
		return x.IsAnthology
	}
	return false
}

type Book_Biography struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectPerson       string `protobuf:"bytes,1,opt,name=subjectPerson,proto3" json:"subjectPerson,omitempty"`
	NotableAchievements string `protobuf:"bytes,2,opt,name=notableAchievements,proto3" json:"notableAchievements,omitempty"`
}

func (x *Book_Biography) Reset() {
	*x = Book_Biography{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_library_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_Biography) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_Biography) ProtoMessage() {}

func (x *Book_Biography) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_library_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_Biography.ProtoReflect.Descriptor instead.
func (*Book_Biography) Descriptor() ([]byte, []int) {
	return file_library_v1_library_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Book_Biography) GetSubjectPerson() string {
	if x != nil {
		return x.SubjectPerson
	}
	return ""
}

func (x *Book_Biography) GetNotableAchievements() string {
	if x != nil {
		return x.NotableAchievements
	}
	return ""
}

type Book_Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Book_Review) Reset() {
	*x = Book_Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_v1_library_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book_Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book_Review) ProtoMessage() {}

func (x *Book_Review) ProtoReflect() protoreflect.Message {
	mi := &file_library_v1_library_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book_Review.ProtoReflect.Descriptor instead.
func (*Book_Review) Descriptor() ([]byte, []int) {
	return file_library_v1_library_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Book_Review) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Book_Review) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

var File_library_v1_library_proto protoreflect.FileDescriptor

var file_library_v1_library_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x22, 0x33, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xa6, 0x0b, 0x0a, 0x04,
	0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x11, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x05,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x12, 0x31,
	0x0a, 0x06, 0x70, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x2e, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x38, 0x0a,
	0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x0a, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3e,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x1a, 0x48, 0x0a, 0x05, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x1a, 0x54,
	0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3e, 0x0a, 0x08, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x41, 0x0a, 0x06, 0x50, 0x6f, 0x65, 0x74, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x74, 0x68, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e,
	0x74, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x1a, 0x65, 0x0a, 0x09, 0x42, 0x69, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x6e,
	0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3b,
	0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x17, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x42,
	0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x11,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x5f, 0x6b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x06, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x11, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x5f, 0x6b, 0x65, 0x79,
	0x12, 0x13, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0f, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x5f, 0x74, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x4d, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x52, 0x41, 0x4d, 0x41,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x48,
	0x4f, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x42, 0xa2, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6d, 0x61, 0x75, 0x72, 0x79, 0x39, 0x35, 0x2f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x66, 0x79, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4c, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0b, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_library_v1_library_proto_rawDescOnce sync.Once
	file_library_v1_library_proto_rawDescData = file_library_v1_library_proto_rawDesc
)

func file_library_v1_library_proto_rawDescGZIP() []byte {
	file_library_v1_library_proto_rawDescOnce.Do(func() {
		file_library_v1_library_proto_rawDescData = protoimpl.X.CompressGZIP(file_library_v1_library_proto_rawDescData)
	})
	return file_library_v1_library_proto_rawDescData
}

var file_library_v1_library_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_library_v1_library_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_library_v1_library_proto_goTypes = []interface{}{
	(Category)(0),           // 0: library.v1.Category
	(*Character)(nil),       // 1: library.v1.Character
	(*Book)(nil),            // 2: library.v1.Book
	(*Client)(nil),          // 3: library.v1.Client
	(*Borrow)(nil),          // 4: library.v1.Borrow
	(*Book_Novel)(nil),      // 5: library.v1.Book.Novel
	(*Book_ShortStory)(nil), // 6: library.v1.Book.ShortStory
	(*Book_Academic)(nil),   // 7: library.v1.Book.Academic
	(*Book_Poetry)(nil),     // 8: library.v1.Book.Poetry
	(*Book_Biography)(nil),  // 9: library.v1.Book.Biography
	(*Book_Review)(nil),     // 10: library.v1.Book.Review
	nil,                     // 11: library.v1.Book.BookPriceEntry
	nil,                     // 12: library.v1.Book.ChaptersEntry
	nil,                     // 13: library.v1.Book.CharactersEntry
}
var file_library_v1_library_proto_depIdxs = []int32{
	5,  // 0: library.v1.Book.novel:type_name -> library.v1.Book.Novel
	6,  // 1: library.v1.Book.short_story:type_name -> library.v1.Book.ShortStory
	7,  // 2: library.v1.Book.academic:type_name -> library.v1.Book.Academic
	8,  // 3: library.v1.Book.poetry:type_name -> library.v1.Book.Poetry
	9,  // 4: library.v1.Book.biography:type_name -> library.v1.Book.Biography
	10, // 5: library.v1.Book.main_review:type_name -> library.v1.Book.Review
	10, // 6: library.v1.Book.reviews:type_name -> library.v1.Book.Review
	11, // 7: library.v1.Book.book_price:type_name -> library.v1.Book.BookPriceEntry
	12, // 8: library.v1.Book.chapters:type_name -> library.v1.Book.ChaptersEntry
	13, // 9: library.v1.Book.characters:type_name -> library.v1.Book.CharactersEntry
	0,  // 10: library.v1.Book.category:type_name -> library.v1.Category
	1,  // 11: library.v1.Book.CharactersEntry.value:type_name -> library.v1.Character
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_library_v1_library_proto_init() }
func file_library_v1_library_proto_init() {
	if File_library_v1_library_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_library_v1_library_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_library_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_library_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_library_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Borrow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_library_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_Novel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_library_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_ShortStory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_library_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_Academic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_library_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_Poetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_library_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_Biography); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_v1_library_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book_Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_library_v1_library_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Book_Novel_)(nil),
		(*Book_ShortStory_)(nil),
		(*Book_Academic_)(nil),
		(*Book_Poetry_)(nil),
		(*Book_Biography_)(nil),
	}
	file_library_v1_library_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_library_v1_library_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_library_v1_library_proto_goTypes,
		DependencyIndexes: file_library_v1_library_proto_depIdxs,
		EnumInfos:         file_library_v1_library_proto_enumTypes,
		MessageInfos:      file_library_v1_library_proto_msgTypes,
	}.Build()
	File_library_v1_library_proto = out.File
	file_library_v1_library_proto_rawDesc = nil
	file_library_v1_library_proto_goTypes = nil
	file_library_v1_library_proto_depIdxs = nil
}

// Specs ...
func (*Character) Specs() []byte {
	var buffer bytes.Buffer
	buffer.WriteString("{")
	buffer.WriteString("\"fields\": {")
	buffer.WriteString("\"name\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"name\"")
	buffer.WriteString("},")
	buffer.WriteString("\"role\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"role\"")
	buffer.WriteString("},")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("},")
	buffer.WriteString("\"oneofs\": {")
	buffer.WriteString("}")
	buffer.WriteString("}")
	return buffer.Bytes()
}

// Specs ...
func (*Book) Specs() []byte {
	var buffer bytes.Buffer
	buffer.WriteString("{")
	buffer.WriteString("\"fields\": {")
	buffer.WriteString("\"_key\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"_key\"")
	buffer.WriteString("},")
	buffer.WriteString("\"title\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"title\"")
	buffer.WriteString("},")
	buffer.WriteString("\"author\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"author\"")
	buffer.WriteString("},")
	buffer.WriteString("\"mainReview\": {")
	buffer.WriteString("\"optional\": true,")
	var _MainReview interface{} = new(Book_Review)
	if spec, ok := _MainReview.(utils.ISpecs); ok {
		buffer.WriteString("\"value\":")
		buffer.Write(spec.Specs())
	}
	buffer.WriteString(",")
	buffer.WriteString("\"type\": \"message\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"mainReview\"")
	buffer.WriteString("},")
	buffer.WriteString("\"reviews\": {")
	buffer.WriteString("\"kind\":\"list\",")
	var _Reviews interface{} = new(Book_Review)
	if spec, ok := _Reviews.(utils.ISpecs); ok {
		buffer.WriteString("\"value\":")
		buffer.Write(spec.Specs())
	}
	buffer.WriteString(",")
	buffer.WriteString("\"type\": \"message\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"reviews\"")
	buffer.WriteString("},")
	buffer.WriteString("\"tags\": {")
	buffer.WriteString("\"kind\":\"list\",")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"tags\"")
	buffer.WriteString("},")
	buffer.WriteString("\"bookPrice\": {")
	buffer.WriteString("\"kind\":\"map\",")
	buffer.WriteString("\"key\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString("},")
	buffer.WriteString("\"value\": {")
	buffer.WriteString("\"type\": \"int32\"")
	buffer.WriteString("},")
	buffer.WriteString("\"name\":\"bookPrice\"")
	buffer.WriteString("},")
	buffer.WriteString("\"chapters\": {")
	buffer.WriteString("\"kind\":\"map\",")
	buffer.WriteString("\"key\": {")
	buffer.WriteString("\"type\": \"int32\"")
	buffer.WriteString("},")
	buffer.WriteString("\"value\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString("},")
	buffer.WriteString("\"name\":\"chapters\"")
	buffer.WriteString("},")
	buffer.WriteString("\"characters\": {")
	buffer.WriteString("\"kind\":\"map\",")
	buffer.WriteString("\"key\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString("},")
	buffer.WriteString("\"value\": {")
	var _Value interface{} = new(Character)
	if spec, ok := _Value.(utils.ISpecs); ok {
		buffer.WriteString("\"value\":")
		buffer.Write(spec.Specs())
	}
	buffer.WriteString(",")
	buffer.WriteString("\"type\": \"message\"")
	buffer.WriteString("},")
	buffer.WriteString("\"name\":\"characters\"")
	buffer.WriteString("},")
	buffer.WriteString("\"portrait\": {")
	buffer.WriteString("\"type\": \"bytes\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"portrait\"")
	buffer.WriteString("},")
	buffer.WriteString("\"gallery\": {")
	buffer.WriteString("\"kind\":\"list\",")
	buffer.WriteString("\"type\": \"bytes\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"gallery\"")
	buffer.WriteString("},")
	buffer.WriteString("\"category\": {")
	buffer.WriteString("\"options\": {")
	buffer.WriteString("\"0\":\"CATEGORY_UNSPECIFIED\",")
	buffer.WriteString("\"1\":\"CATEGORY_DRAMA\",")
	buffer.WriteString("\"2\":\"CATEGORY_HORROR\",")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("},")
	buffer.WriteString("\"type\": \"enum\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"category\"")
	buffer.WriteString("},")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("},")
	buffer.WriteString("\"oneofs\": {")
	buffer.WriteString("\"Type\": {")
	buffer.WriteString("\"novel\": ")
	_Novel := new(Book_Novel)
	buffer.Write(_Novel.Specs())
	buffer.WriteString(",")
	buffer.WriteString("\"shortStory\": ")
	_ShortStory := new(Book_ShortStory)
	buffer.Write(_ShortStory.Specs())
	buffer.WriteString(",")
	buffer.WriteString("\"academic\": ")
	_Academic := new(Book_Academic)
	buffer.Write(_Academic.Specs())
	buffer.WriteString(",")
	buffer.WriteString("\"poetry\": ")
	_Poetry := new(Book_Poetry)
	buffer.Write(_Poetry.Specs())
	buffer.WriteString(",")
	buffer.WriteString("\"biography\": ")
	_Biography := new(Book_Biography)
	buffer.Write(_Biography.Specs())
	buffer.WriteString(",")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("}")
	buffer.WriteString("}")
	buffer.WriteString("}")
	return buffer.Bytes()
}

// Specs ...
func (*Book_Novel) Specs() []byte {
	var buffer bytes.Buffer
	buffer.WriteString("{")
	buffer.WriteString("\"fields\": {")
	buffer.WriteString("\"genre\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"genre\"")
	buffer.WriteString("},")
	buffer.WriteString("\"publicationYear\": {")
	buffer.WriteString("\"type\": \"int32\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"publicationYear\"")
	buffer.WriteString("},")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("},")
	buffer.WriteString("\"oneofs\": {")
	buffer.WriteString("}")
	buffer.WriteString("}")
	return buffer.Bytes()
}

// Specs ...
func (*Book_ShortStory) Specs() []byte {
	var buffer bytes.Buffer
	buffer.WriteString("{")
	buffer.WriteString("\"fields\": {")
	buffer.WriteString("\"lengthPages\": {")
	buffer.WriteString("\"type\": \"int32\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"lengthPages\"")
	buffer.WriteString("},")
	buffer.WriteString("\"isCollection\": {")
	buffer.WriteString("\"type\": \"bool\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"isCollection\"")
	buffer.WriteString("},")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("},")
	buffer.WriteString("\"oneofs\": {")
	buffer.WriteString("}")
	buffer.WriteString("}")
	return buffer.Bytes()
}

// Specs ...
func (*Book_Academic) Specs() []byte {
	var buffer bytes.Buffer
	buffer.WriteString("{")
	buffer.WriteString("\"fields\": {")
	buffer.WriteString("\"subject\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"subject\"")
	buffer.WriteString("},")
	buffer.WriteString("\"edition\": {")
	buffer.WriteString("\"type\": \"int32\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"edition\"")
	buffer.WriteString("},")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("},")
	buffer.WriteString("\"oneofs\": {")
	buffer.WriteString("}")
	buffer.WriteString("}")
	return buffer.Bytes()
}

// Specs ...
func (*Book_Poetry) Specs() []byte {
	var buffer bytes.Buffer
	buffer.WriteString("{")
	buffer.WriteString("\"fields\": {")
	buffer.WriteString("\"style\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"style\"")
	buffer.WriteString("},")
	buffer.WriteString("\"isAnthology\": {")
	buffer.WriteString("\"type\": \"bool\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"isAnthology\"")
	buffer.WriteString("},")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("},")
	buffer.WriteString("\"oneofs\": {")
	buffer.WriteString("}")
	buffer.WriteString("}")
	return buffer.Bytes()
}

// Specs ...
func (*Book_Biography) Specs() []byte {
	var buffer bytes.Buffer
	buffer.WriteString("{")
	buffer.WriteString("\"fields\": {")
	buffer.WriteString("\"subjectPerson\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"subjectPerson\"")
	buffer.WriteString("},")
	buffer.WriteString("\"notableAchievements\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"notableAchievements\"")
	buffer.WriteString("},")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("},")
	buffer.WriteString("\"oneofs\": {")
	buffer.WriteString("}")
	buffer.WriteString("}")
	return buffer.Bytes()
}

// Specs ...
func (*Book_Review) Specs() []byte {
	var buffer bytes.Buffer
	buffer.WriteString("{")
	buffer.WriteString("\"fields\": {")
	buffer.WriteString("\"message\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"message\"")
	buffer.WriteString("},")
	buffer.WriteString("\"name\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"name\"")
	buffer.WriteString("},")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("},")
	buffer.WriteString("\"oneofs\": {")
	buffer.WriteString("}")
	buffer.WriteString("}")
	return buffer.Bytes()
}

// Specs ...
func (*Client) Specs() []byte {
	var buffer bytes.Buffer
	buffer.WriteString("{")
	buffer.WriteString("\"fields\": {")
	buffer.WriteString("\"_key\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"_key\"")
	buffer.WriteString("},")
	buffer.WriteString("\"name\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"name\"")
	buffer.WriteString("},")
	buffer.WriteString("\"email\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"email\"")
	buffer.WriteString("},")
	buffer.WriteString("\"member\": {")
	buffer.WriteString("\"type\": \"bool\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"member\"")
	buffer.WriteString("},")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("},")
	buffer.WriteString("\"oneofs\": {")
	buffer.WriteString("}")
	buffer.WriteString("}")
	return buffer.Bytes()
}

// Specs ...
func (*Borrow) Specs() []byte {
	var buffer bytes.Buffer
	buffer.WriteString("{")
	buffer.WriteString("\"fields\": {")
	buffer.WriteString("\"_key\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"_key\"")
	buffer.WriteString("},")
	buffer.WriteString("\"_from\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"_from\"")
	buffer.WriteString("},")
	buffer.WriteString("\"_to\": {")
	buffer.WriteString("\"type\": \"string\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"_to\"")
	buffer.WriteString("},")
	buffer.WriteString("\"date\": {")
	buffer.WriteString("\"optional\": true,")
	buffer.WriteString("\"type\": \"int64\"")
	buffer.WriteString(",")
	buffer.WriteString("\"name\":\"date\"")
	buffer.WriteString("},")
	utils.TrimTrailingComma(&buffer)
	buffer.WriteString("},")
	buffer.WriteString("\"oneofs\": {")
	buffer.WriteString("}")
	buffer.WriteString("}")
	return buffer.Bytes()
}

// LoadMap populates struct fields from a map, handling decoding for special fields.
func (o *Character) LoadMap(values map[string]interface{}) {
	if val, ok := values["name"].(string); ok {
		o.Name = val
	}
	if val, ok := values["role"].(string); ok {
		o.Role = val
	}
}

// LoadMap populates struct fields from a map, handling decoding for special fields.
func (o *Book) LoadMap(values map[string]interface{}) {
	if val, ok := values["_key"].(string); ok {
		o.Key = val
	}
	if val, ok := values["title"].(string); ok {
		o.Title = val
	}
	if val, ok := values["author"].(string); ok {
		o.Author = val
	}
	if val, ok := values["mainReview"].(map[string]interface{}); ok {
		field := new(Book_Review)
		field.LoadMap(val)
		o.MainReview = field
	}
	if list, ok := values["reviews"].([]interface{}); ok {
		utils.MakeSlice(&o.Reviews, len(list))
		for index, item := range list {
			if val, ok := item.(map[string]interface{}); ok {
				field := new(Book_Review)
				field.LoadMap(val)
				o.Reviews[index] = field
			}
		}
	}
	if list, ok := values["tags"].([]interface{}); ok {
		utils.MakeSlice(&o.Tags, len(list))
		for index, item := range list {
			if val, ok := item.(string); ok {
				o.Tags[index] = val
			}
		}
	}
	if values, ok := values["bookPrice"].(map[string]interface{}); ok {
		utils.MakeMap(&o.BookPrice)
		for key, value := range values {
			if val, ok := value.(float64); ok {
				o.BookPrice[key] = int32(val)
			}
		}
	}
	if values, ok := values["chapters"].(map[string]interface{}); ok {
		utils.MakeMap(&o.Chapters)
		for key, value := range values {
			var tmp interface{} = utils.ParseFloat(key)
			var parsedKey int32
			if val, ok := tmp.(float64); ok {
				parsedKey = int32(val)
			}
			if val, ok := value.(string); ok {
				o.Chapters[parsedKey] = val
			}
		}
	}
	if values, ok := values["characters"].(map[string]interface{}); ok {
		utils.MakeMap(&o.Characters)
		for key, value := range values {
			if val, ok := value.(map[string]interface{}); ok {
				field := new(Character)
				field.LoadMap(val)
				o.Characters[key] = field
			}
		}
	}
	if val, ok := values["portrait"].(string); ok {
		o.Portrait = utils.DecodeBytes(val)
	}
	if list, ok := values["gallery"].([]interface{}); ok {
		utils.MakeSlice(&o.Gallery, len(list))
		for index, item := range list {
			if val, ok := item.(string); ok {
				o.Gallery[index] = utils.DecodeBytes(val)
			}
		}
	}
	var category int32
	if val, ok := values["category"].(float64); ok {
		category = int32(val)
	}
	o.Category = Category(category)
	if _opt, ok := values["Type"].(map[string]interface{}); ok {
		if val, ok := _opt["Novel"].(map[string]interface{}); ok {
			field := new(Book_Novel)
			field.LoadMap(val)
			o.Type = &Book_Novel_{Novel: field}
		}
		if val, ok := _opt["ShortStory"].(map[string]interface{}); ok {
			field := new(Book_ShortStory)
			field.LoadMap(val)
			o.Type = &Book_ShortStory_{ShortStory: field}
		}
		if val, ok := _opt["Academic"].(map[string]interface{}); ok {
			field := new(Book_Academic)
			field.LoadMap(val)
			o.Type = &Book_Academic_{Academic: field}
		}
		if val, ok := _opt["Poetry"].(map[string]interface{}); ok {
			field := new(Book_Poetry)
			field.LoadMap(val)
			o.Type = &Book_Poetry_{Poetry: field}
		}
		if val, ok := _opt["Biography"].(map[string]interface{}); ok {
			field := new(Book_Biography)
			field.LoadMap(val)
			o.Type = &Book_Biography_{Biography: field}
		}
	}
}

// LoadMap populates struct fields from a map, handling decoding for special fields.
func (o *Book_Novel) LoadMap(values map[string]interface{}) {
	if val, ok := values["genre"].(string); ok {
		o.Genre = val
	}
	if val, ok := values["publicationYear"].(float64); ok {
		o.PublicationYear = int32(val)
	}
}

// LoadMap populates struct fields from a map, handling decoding for special fields.
func (o *Book_ShortStory) LoadMap(values map[string]interface{}) {
	if val, ok := values["lengthPages"].(float64); ok {
		o.LengthPages = int32(val)
	}
	if val, ok := values["isCollection"].(bool); ok {
		o.IsCollection = val
	}
}

// LoadMap populates struct fields from a map, handling decoding for special fields.
func (o *Book_Academic) LoadMap(values map[string]interface{}) {
	if val, ok := values["subject"].(string); ok {
		o.Subject = val
	}
	if val, ok := values["edition"].(float64); ok {
		o.Edition = int32(val)
	}
}

// LoadMap populates struct fields from a map, handling decoding for special fields.
func (o *Book_Poetry) LoadMap(values map[string]interface{}) {
	if val, ok := values["style"].(string); ok {
		o.Style = val
	}
	if val, ok := values["isAnthology"].(bool); ok {
		o.IsAnthology = val
	}
}

// LoadMap populates struct fields from a map, handling decoding for special fields.
func (o *Book_Biography) LoadMap(values map[string]interface{}) {
	if val, ok := values["subjectPerson"].(string); ok {
		o.SubjectPerson = val
	}
	if val, ok := values["notableAchievements"].(string); ok {
		o.NotableAchievements = val
	}
}

// LoadMap populates struct fields from a map, handling decoding for special fields.
func (o *Book_Review) LoadMap(values map[string]interface{}) {
	if val, ok := values["message"].(string); ok {
		o.Message = val
	}
	if val, ok := values["name"].(string); ok {
		o.UserName = val
	}
}

// LoadMap populates struct fields from a map, handling decoding for special fields.
func (o *Client) LoadMap(values map[string]interface{}) {
	if val, ok := values["_key"].(string); ok {
		o.Key = val
	}
	if val, ok := values["name"].(string); ok {
		o.Name = val
	}
	if val, ok := values["email"].(string); ok {
		o.Email = val
	}
	if val, ok := values["member"].(bool); ok {
		o.Member = val
	}
}

// LoadMap populates struct fields from a map, handling decoding for special fields.
func (o *Borrow) LoadMap(values map[string]interface{}) {
	if val, ok := values["_key"].(string); ok {
		o.Key = val
	}
	if val, ok := values["_from"].(string); ok {
		o.From = val
	}
	if val, ok := values["_to"].(string); ok {
		o.To = val
	}
	if val, ok := values["date"].(float64); ok {
		tmp := int64(val)
		o.Date = &tmp
	}
}
